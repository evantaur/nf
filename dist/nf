#!/usr/bin/env python3
import sys
import os
import argparse
import json
from pathlib import Path
import atexit
import re

try:
    size = os.get_terminal_size()
except OSError:
    size = 60

__VERSION__ = 1.001



class config:
      ###################
     ### Config class
    ##################
    def __init__(self):
        home_dir = os.path.expanduser( '~' )
        self.path              = f"{home_dir}/.config/nf"
        self.filename          = f"{self.path}/config.json"
        self.userTemplatesPath = f"{self.path}/templates"
        self.config            = {}
        if Path(self.filename).exists():
            with open(self.filename,'r',encoding='utf-8') as cfg:
                self.config = json.load(cfg)
        else:
            self.config = {}
        #Create user template directory if needed
        Path(self.userTemplatesPath).mkdir( 0o760, True, True )
        self.userTemplates     = tuple(os.listdir(self.userTemplatesPath))

    def __call__(self,key=False,value=False):
        if key:
            return self.config.get(key,None)
        return self.config

    def save(self):
        if len(self.config.keys()) > 0:
            with open(self.filename,'w',encoding='utf-8') as cfg:
                json.dump(self.config, cfg)
        else:
            os.remove(f"{config_dir}/config.json")

conf = config()


'''
Automatically generated templates.
'''
templates = {
  "json": [
    "{}\n"
  ],
  "rs": [
    "//\n",
    "//\n",
    "//\n",
    "fn main() {\n",
    "\n",
    "}\n"
  ],
  "php": [
    "<?php\n",
    "\n",
    "?>\n"
  ],
  "pl": [
    "#!/usr/bin/perl\n"
  ],
  "sh": [
    "#!/bin/bash\n"
  ],
  "c": [
    "// \n",
    "//\n",
    "//\n",
    "\n",
    "#include <stdio.h>\n",
    "  \n",
    "int main()\n",
    "{\n",
    "\n",
    "}\n"
  ],
  "py": [
    "#!/usr/bin/env python3\n"
  ]
}


'''
ARGPARSE
'''
parser = argparse.ArgumentParser(
    description="Creates a new file with a template based on the file extension or template switch",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=f'''
Examples:

  # Creates a new file called test.sh
  # with a shebang #!/bin/bash

  %(prog)s test.sh

'''
    )
def any_in(a,b):
    return len([x for x in a if x in b])>0

def upgrade():
    filepath = os.path.realpath(__file__)
    if not os.access(filepath, os.W_OK):
        sys.exit("Permission denied!")
    try:
        r.urlretrieve('https://raw.githubusercontent.com/evantaur/nf/main/dist/nf', filepath)
        sys.exit("Upgrade complete")
    except PermissionError:
        sys.exit("Permission denied!")

try:
    import urllib.request as r
    filepath = os.path.realpath(__file__)
    if os.access(filepath, os.W_OK):
       parser.add_argument(
            '--upgrade',
            help='Upgrade script',
            action="store_true"
        )

except ModuleNotFoundError:
    pass

if any_in(["--list","-l"],sys.argv):
    print("User templates:")
    for i in conf.userTemplates:
        print(f"  - {i}")
    print("-"*20)
    print("System templates:")
    for i in templates:
        print(f"  - {i}")
    sys.exit(0)


if "--upgrade" in sys.argv:
    print("Upgrading")
    upgrade()
    print("Upgrade finished")
    sys.exit(0)


parser.add_argument(
    '-d', '--dir',
    help='Create directory structure if needed',
    action="store_true"
    )


parser.add_argument(
    '-v', '--version',
    help='Show version and exit',
    action='version',
    version=f"%(prog)s version {__VERSION__}"
    )


parser.add_argument(
    '-x',
    help='Give execute permission (chmod +x)',
    action="store_true"
    )

parser.add_argument(
    '-t','--template',
    default=None,
    help='use this template'
    )


parser.add_argument(
    '-a','--add',
    action="store_true",
    help='add file as custom template.'
    )


parser.add_argument(
    '-r','--remove',
    action="store_true",
    help='remove custom template'
    )


parser.add_argument(
    '-l','--list',
    action="store_true",
    help='list templates'
    )

parser.add_argument(
    '--print-only',
    action="store_true",
    help='Do not write to file'
    )

variables = parser.add_argument_group(
    'Variables',
    description="Create or remove variables to be used with templates"
    )

variables.add_argument(
    '--vars',
    default=None,
    help='use variables from JSON file or from command line using {"varname":"varvalue"} '
)

variables.add_argument(
    '--variables',
    action="store_true",
    help='lists variables'
)

variables.add_argument(
    '--va','--variable-add',
    nargs=2,
    metavar=("name","value"),
    help='add variable'
)

variables.add_argument(
    '--vr','--variable-remove',
    default=False,
    help='remove variable'
)

variables.add_argument(
    '--variable-parse',
    default=False,
    help='parses all variables from a template file and saves them for later use'
)


editor = parser.add_argument_group(
    'Editor',
    description="Use these if you want to open the file after it has been created"
    )


editor.add_argument(
    '-e','--edit',
    help='open in editor',
    action='store_true'
    )


editor.add_argument(
    '-X','--execute',
    help='Execute after saving',
    action='store_true'
    )


editor.add_argument(
    '--change-editor',
    help='change editor',
    action='store_true'
    )


parser.add_argument(
    'filename',
    help='filename',
    nargs='?',
    default=False
    )


def list_editors():
    """check availiable editors."""
    import shutil
    #This line will get replaced by src/editors
    editors = [
        "atom",
        "bluefish",
        "brackets",
        "emacs",
        "geany",
        "gedit",
        "gvim",
        "helix",
        "jed",
        "kakoune",
        "kate",
        "kwrite",
        "leafpad",
        "lime",
        "mcedit",
        "medit",
        "micro",
        "nano",
        "ne",
        "neovim",
        "notepad",
        "notepad++",
        "notepadqq",
        "nvim",
        "pico",
        "subl",
        "tilde",
        "vi",
        "vim"
]
    ret = ["default"]
    for key in editors:
        if shutil.which(key):
            ret.append(key)
    return ret


if "--change-editor" in sys.argv:
    editors=list_editors()
    current=[0,conf().get("editor","default")]
    print("Please select editor:\n")
    for i,editor in enumerate(editors):
        if editor == current[1]:
            current[0] = i
        printformat = editor if editor != current[1] else f"\033[93m*{editor}*\033[0m"
        print(f"  [{i}] {printformat} ")
    try:
        s = input(f"\n\nSelect [default={current[1]}]:\n")
        s = int(s) if s else -1
        if(s == -1 or s >= len(editors)):
            sys.exit(0)
        if s >= 0:
            if "editor" in conf() and s == 0:
                conf.config.pop("editor")
            else:
                conf.config["editor"] = editors[s]
            conf.save()
    except KeyboardInterrupt:
        pass
    sys.exit(0)


args = parser.parse_args()


filename = args.filename


def list_tempaltes():
    ''' list templates'''
    print("templates")
    sys.exit(0)

def editFile():
    editor = conf().get("editor")
    if editor:
        os.system(f"{editor} \"{filename}\"")
    else:
        editor="/usr/bin/editor" if sys.platform != "windows" else "notepad"
        os.system(f"{editor} \"{filename}\"")

def getVars():
    a=False
    try:
        a = json.loads(args.vars)
    except json.decoder.JSONDecodeError:
        pass

    if a:
        return a
    try:
        with open(args.vars,'r',encoding='utf-8') as file:
            a = json.load(file)
            return a
    except FileNotFoundError:
        parser.error("No such file or invalid dictiionary input")


class template:
    def __init__(self,content):
        self.content = "".join(content)
        self.iVar = {}
        self.regex = r'<\|\s*(?P<var>[^\s|>]+)(?:\[(?P<options>[^\]]*)\])?\s*\|>'
        self.pattern = re.compile(self.regex)
        self.var = {}
        #print(content)

    def prompt(self,getinput):
        sel=False
        isDict=False
        if "select" in getinput["options"]:
            sel=True
            isDict = type(getinput["options"]["select"]) == dict
            key_lenght = max([len(key) for key in getinput["options"]["select"]])+2
            if isDict:
                print(f"%5s | %-{key_lenght}s | Description"  % ("Index","value"))
            elif getinput["options"].get("index"):
                print(f"%5s | %-{key_lenght}s"  % ("Index","Description"))
            else:
                print(f"%5s | %-{key_lenght}s"  % ("Index","value"))
            print("-"*60)
            for i,val in enumerate(getinput["options"].get("select")):
                if isDict:
                    print(f"%5s | %-{key_lenght}s | %s"  % (i,val,getinput["options"]["select"][val]))
                    continue
                print("%5s | %-55s"  % (i,val))
        description = "" if not getinput["options"].get("desc") else f""" ( {getinput["options"].get("desc")} )"""
        pDefault    = "" if not getinput["options"].get("default") else f"""{getinput["options"].get("default")}"""
        prompt=f"""Enter value for {getinput["name"]}{description}\n{pDefault}:"""
        while True:
            value = input(prompt)
            if value or getinput["options"].get("default",False):
                value = value if value else getinput["options"].get("default",False)
                if value and sel and not value.isdigit():
                    print("Input must be integer and in range")
                    continue
                if sel and int(value) not in range(0, len(getinput["options"]["select"])):
                    print(value,range(0,len(getinput["options"]["select"])))
                    print("List index out of range!")
                    continue
            if not any([value,getinput["options"].get("default")]):
                continue
            if isDict:
                return list(getinput["options"]["select"].keys())[int(value)]
            if sel:
                return value if getinput["options"].get("index") else getinput["options"]["select"][int(value)]
            break
        return value or getinput["options"].get("default")

    @staticmethod
    def extract(options):
        options=options.split('|')
        opt = {option.split("=")[0]: option.split("=")[1] if "=" in option else True for option in options if "=" in option or option.lower() in ["require","r","index"]}
        if 'r' in opt:
            opt['require'] = opt.pop('r')
        if opt.get("select"):
            try: #attempt to convert a dictionary
                opt["select"] = json.loads(opt["select"])
            except json.decoder.JSONDecodeError:
                opt["select"] = tuple(x.strip() for x in opt.get("select")[1:-1].split(','))
        return opt

    def test(self,options):
        opt       = {option.split("=")[0]: option.split("=")[1] if "=" in option else True for option in options if "=" in option or option.lower() in ["require","r"]}

    def repl(self,match):
        variables           = conf().get("variables",{}) if not args.vars else getVars()
        v                   = {"name" : match.group('var') }
        v["options"]        = {} if not match.group('options') else self.extract(match.group('options'))
        req                 = v["options"].get("require",False)
        if v["name"] in self.iVar:
            return self.iVar[v["name"]]
        if v["name"] in variables and not req:
            self.iVar[v["name"]] = variables[v["name"]]
            return variables[v["name"]]
        value = self.prompt(v)
        self.iVar[v["name"]] = value
        if not req:
            self.var[v["name"]] = value
        return value

    def get_template(self):
        try:
            self.template= self.pattern.sub(self.repl, self.content)
            return self.template
        except KeyboardInterrupt:
            sys.exit("\nAborted")

    def get_variables(self):
        try:
            self.template= self.pattern.sub(self.repl, self.content)
            return self.var
        except KeyboardInterrupt:
            sys.exit("\nAborted")


def get_template(template):
    '''
    Check if template exsists in user templates,
    if not attempt to use built in template
    '''
    if template in conf.userTemplates:
        with open(f"{conf.userTemplatesPath}/{template}",'r',encoding='utf-8') as file:
            return file.readlines()
    elif template in templates:
        return templates[template]
    else:
        if args.template:
            sys.exit("Template not found!")
        return [""]

def check_empty(filename):
    ''' Check if file exsists or is not empty '''
    if not Path(filename).exists():
        return False
    if os.path.getsize(filename) > 0:
        return True
    return False

def executeAfterDone(a):
    os.system(filename)

if args.variables:
    vs = conf().get("variables",{})
    w = size.columns
    var_width= max([len(key) for key in vs])+2
    form = f"%-{var_width}s | %-30s"
    print(var_width)
    print(form  % ("Variable name","Variable value"))
    print("*"*60)
    for x,i in enumerate(vs.keys()):
        if x % 2 == 0:
            print(f"\033[92m{form}\033[0m"  % (i,vs[i]))
        else:
            print(f"\033[93m{form}\033[0m"  % (i,vs[i]))
    sys.exit(0)
if args.va:
    inj=args.va
    conf.config["variables"] = conf.config.get("variables",{})
    conf.config["variables"][inj[0]] = inj[1]
    conf.save()
    sys.exit(0)

if args.vr:
    inj=args.vr
    if inj in conf.config["variables"]:
        conf.config["variables"].pop(inj)
    conf.save()
    sys.exit(0)


if args.variable_parse:
    filename=args.variable_parse
    if not Path(filename).exists():
        sys.exit(f"""File "{filename}" does not exsist""")
    with open(filename) as f:
        print(conf())
        inputfile = f.readlines()
        get = template(inputfile)
        a = conf.config.get("variables",{})
        a.update(get.get_variables())
        conf.config["variables"] = a
        conf.save()
    sys.exit(0)

if args.add:
    exists = Path(filename).exists()
    if exists:
        templatename = input("Enter name for template:\n")
        with open(filename,'r',encoding='utf-8') as file:
            text = file.readlines()
            with open(f"{user_template_dir}/{templatename}",'w',encoding='utf-8') as f:
                f.writelines(text)
        sys.exit(0)
    sys.exit("File not found.")
elif args.remove:
    templatename = f"{user_template_dir}/{filename}"
    exists = Path(templatename).exists()
    if exists:
        os.remove(templatename)
        print(f"Template {filename} removed.")
        sys.exit(0)
    sys.exit(f"No template named {filename}")

elif args.print_only:
    if not any([filename,args.template]):
        parser.error("Atleast filename or template is required")
    f_ext = Path(filename).suffix.strip('.') if not args.template else args.template
    t = get_template(f_ext)
    if t:
        temp = template(get_template(f_ext))
        print(temp.get_template())
    sys.exit()

elif not filename:
    parser.print_help(sys.stderr)

else:
    if check_empty(filename):
        if args.edit:
            editFile()
            sys.exit(0)
        sys.exit("File not empty")

    f_ext = Path(filename).suffix.strip('.') if not args.template else args.template
    temp = template(get_template(f_ext))
    content = temp.get_template()
    try:
        if args.dir:
            ''' create directory if needed'''
            dirname=os.path.dirname(filename)
            Path(dirname).mkdir(0o760, True, True )
        with open(filename, 'w', encoding='utf-8') as file:
            # Writing data to a file
            file.write(content)
            if args.x:
                chmod = os.system(f"chmod +x {filename}")
        if all([args.x,args.edit,args.execute]):
                atexit.register(os.system,filename)

    except FileNotFoundError:
    	print("No such directory.")
    except PermissionError:
    	print("Permission denied")


if args.edit:
    editFile()


